name: CI & CD (Optimized for Module Changes)

on:
  push:
    branches: [ develop ]
    paths:
      - 'backend-server/**'
      - 'frontend-server/**'
      - 'gateway-server/**'
      - 'eureka-server/**'
      - 'common-module/**'
  pull_request:
    branches: [ develop ]
    paths:
      - 'backend-server/**'
      - 'frontend-server/**'
      - 'gateway-server/**'
      - 'eureka-server/**'
      - 'common-module/**'

jobs:
  detect_changes:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.list.outputs.changed }}
    steps:
      - name: Checkout full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Filter changed paths
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            backend-server:
              - 'backend-server/**'
            frontend-server:
              - 'frontend-server/**'
            gateway-server:
              - 'gateway-server/**'
            eureka-server:
              - 'eureka-server/**'
            common-module:
              - 'common-module/**'

      - name: Generate final changed-services list
        id: list
        run: |
          modules=()
          # 서비스 직접 변경된 경우
          [[ "${{ steps.filter.outputs.backend-server }}"  == "true" ]] && modules+=("backend-server")
          [[ "${{ steps.filter.outputs.frontend-server }}" == "true" ]] && modules+=("frontend-server")
          [[ "${{ steps.filter.outputs.gateway-server }}"  == "true" ]] && modules+=("gateway-server")
          [[ "${{ steps.filter.outputs.eureka-server }}"   == "true" ]] && modules+=("eureka-server")
          # common-module이 변경되면, 참조하는 모든 서비스 자동 추가
          if [[ "${{ steps.filter.outputs.common-module }}" == "true" ]]; then
            for svc in backend-server frontend-server gateway-server eureka-server; do
              [[ ! " ${modules[*]} " =~ " $svc " ]] && modules+=("$svc")
            done
          fi
          # 결과 문자열
          changed="${modules[*]}"
          echo "changed=$changed" >> $GITHUB_OUTPUT

  build:
    needs: detect_changes
    if: needs.detect_changes.outputs.changed != ''
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      - name: Clean & Build changed-services
        run: |
          MODULE_CSV=$(echo "${{ needs.detect_changes.outputs.changed }}" | sed 's/ /,/g')
          echo "▶ mvn clean package -pl $MODULE_CSV -am"
          mvn -B clean package -pl "$MODULE_CSV" -am -DskipTests

      - name: Upload built JARs
        uses: actions/upload-artifact@v4
        with:
          name: jars
          path: '**/target/*.jar'
          if-no-files-found: error

  deploy:
    needs: build
    if: needs.detect_changes.outputs.changed != ''
    runs-on: ubuntu-latest
    steps:
      - name: Download JARs
        uses: actions/download-artifact@v4
        with:
          name: jars
          path: downloaded_jars

      - name: Upload JARs to remote
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_IP }}
          username: ${{ secrets.SSH_ID }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          source: "downloaded_jars/**/*.jar"
          target: "~/app/jars/"
          overwrite: true

      - name: Rolling deploy for services
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_IP }}
          username: ${{ secrets.SSH_ID }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            chmod +x ~/startup.sh
            for MOD in ${{ needs.detect_changes.outputs.changed }}; do
              echo "▶ Rolling deploy: $MOD"
              ~/startup.sh "$MOD"
            done
