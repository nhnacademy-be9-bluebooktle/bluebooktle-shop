name: CI & CD

on:
  push:
    branches: [ develop, master ]
    paths:
      - 'backend-server/**'
      - 'frontend-server/**'
      - 'gateway-server/**'
      - 'eureka-server/**'
      - 'common-module/**'
      - 'auth-server/**'
  pull_request:
    branches: [ develop, master ]
    paths:
      - 'backend-server/**'
      - 'frontend-server/**'
      - 'gateway-server/**'
      - 'eureka-server/**'
      - 'common-module/**'
      - 'auth-server/**'

jobs:
  detect_changes:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.list.outputs.changed }}
    steps:
    # …(생략: 필터링 로직 동일)…

  build:
    needs: detect_changes
    if: needs.detect_changes.outputs.changed != ''
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'master' && 'prod' || 'dev' }}
    env:
      CONFIG_SERVER_URI: ${{ secrets.CONFIG_SERVER_URI }}
      SPRING_PROFILES_ACTIVE: ${{ github.ref_name == 'master' && 'prod' || 'dev' }}
    steps:
    # …(생략: 빌드 & 업로드 로직 동일)…

  deploy:
    needs: [ detect_changes, build ]
    if: >
      needs.detect_changes.outputs.changed != '' &&
      (
        (github.event_name == 'push' && github.ref == 'refs/heads/develop') ||
        (github.event_name == 'pull_request' &&
          (
            (github.event.action == 'opened'  && github.event.pull_request.base.ref == 'develop') ||
            (github.event.action == 'closed' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'master')
          )
        )
      )
    runs-on: ubuntu-latest
    # 실제 환경 이름(dev/prod)을 environment에 연결
    environment: ${{ github.ref_name == 'master' && 'prod' || 'dev' }}
    env:
      ENVIRONMENT: ${{ github.ref_name == 'master' && 'prod' || 'dev' }}
      CONFIG_SERVER_URI: ${{ secrets.CONFIG_SERVER_URI }}
      SPRING_PROFILES_ACTIVE: ${{ github.ref_name == 'master' && 'prod' || 'dev' }}

    steps:
      - name: Download JARs
        uses: actions/download-artifact@v4
        with:
          name: jars
          path: downloaded_jars

      - name: Ensure target directories
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_IP }}
          username: ${{ secrets.SSH_ID }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            mkdir -p ~/app/jars/${{ env.ENVIRONMENT }}
            mkdir -p ~/deploy/${{ env.ENVIRONMENT }}/logs/startup
            mkdir -p ~/deploy/${{ env.ENVIRONMENT }}/logs/server

      - name: Upload JARs to remote
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_IP }}
          username: ${{ secrets.SSH_ID }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          source: "downloaded_jars"
          target: "~/app/jars/${{ env.ENVIRONMENT }}/"
          strip_components: 1

      - name: Rolling deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_IP }}
          username: ${{ secrets.SSH_ID }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            STARTUP="${{ env.ENVIRONMENT }}_startup.sh"
            chmod +x ~/$STARTUP
            export SPRING_PROFILES_ACTIVE="${{ env.SPRING_PROFILES_ACTIVE }}"
            export CONFIG_SERVER_URI="${{ env.CONFIG_SERVER_URI }}"
            for MOD in ${{ needs.detect_changes.outputs.changed }}; do
              echo ":arrow_forward: rolling deploy $MOD (${ENVIRONMENT})"
              ~/$STARTUP "$MOD"
            done
