name: CI & CD

on:
  push:
    branches: [ develop, master ]
    paths:
      - 'backend-server/**'
      - 'frontend-server/**'
      - 'gateway-server/**'
      - 'eureka-server/**'
      - 'common-module/**'
      - 'auth-server/**'
  pull_request:
    branches: [ develop, master ]
    paths:
      - 'backend-server/**'
      - 'frontend-server/**'
      - 'gateway-server/**'
      - 'eureka-server/**'
      - 'common-module/**'
      - 'auth-server/**'
  issue_comment:
    types: [ created ]

jobs:
  detect_changes:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.list.outputs.changed }}
      pr_base_ref: ${{ steps.pr_info.outputs.base_ref }}
      pr_head_sha: ${{ steps.pr_info.outputs.head_sha }}
      effective_base_branch: ${{ steps.set_branch.outputs.branch }} # <-- 출력 추가
    steps:
      - name: Get PR info for comment trigger
        id: pr_info
        if: github.event_name == 'issue_comment' && github.event.issue.pull_request
        run: |
          PR_API_URL=$(jq -r .pull_request.url ${{ github.event_path }})
          PR_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github.v3+json" $PR_API_URL)
          echo "base_ref=$(echo "$PR_DATA" | jq -r .base.ref)" >> $GITHUB_OUTPUT
          echo "head_sha=$(echo "$PR_DATA" | jq -r .head.sha)" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout full history
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'issue_comment' && steps.pr_info.outputs.head_sha || github.ref }}
          fetch-depth: 0

      - name: Filter changed paths
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            backend-server:
              - 'backend-server/**'
            frontend-server:
              - 'frontend-server/**'
            gateway-server:
              - 'gateway-server/**'
            eureka-server:
              - 'eureka-server/**'
            common-module:
              - 'common-module/**'
            auth-server:
              - 'auth-server/**'

      - name: Generate changed-services list
        id: list
        run: |
          if [[ "${{ steps.filter.outputs.common-module }}" == "true" ]]; then
            modules=(eureka-server gateway-server backend-server frontend-server auth-server)
          else
            modules=()
            [[ "${{ steps.filter.outputs.eureka-server }}"   == "true" ]] && modules+=("eureka-server")
            [[ "${{ steps.filter.outputs.gateway-server }}"  == "true" ]] && modules+=("gateway-server")
            [[ "${{ steps.filter.outputs.backend-server }}"  == "true" ]] && modules+=("backend-server")
            [[ "${{ steps.filter.outputs.frontend-server }}" == "true" ]] && modules+=("frontend-server")
            [[ "${{ steps.filter.outputs.auth-server }}"     == "true" ]] && modules+=("auth-server")
          fi
          echo "changed=${modules[*]}" >> $GITHUB_OUTPUT

      - name: Set Effective Base Branch # <-- 단계 추가
        id: set_branch
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "branch=${{ github.event.pull_request.base.ref }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "issue_comment" && "${{ steps.pr_info.outputs.base_ref }}" != "" ]]; then
            echo "branch=${{ steps.pr_info.outputs.base_ref }}" >> $GITHUB_OUTPUT
          else
            echo "branch=" >> $GITHUB_OUTPUT # 기본값 설정 (필요시 조정)
          fi

  build:
    needs: detect_changes
    if: > # if 조건은 그대로 유지
      needs.detect_changes.outputs.changed != '' &&
      (
        (github.event_name == 'push' && (github.ref_name == 'develop' || github.ref_name == 'master')) ||
        (github.event_name == 'pull_request' && (github.event.pull_request.base.ref == 'develop' || github.event.pull_request.base.ref == 'master') && github.event.action == 'closed' && github.event.pull_request.merged == true) ||
        (github.event_name == 'issue_comment' && github.event.issue.pull_request && contains(github.event.comment.body, 'REBUILD') && (needs.detect_changes.outputs.pr_base_ref == 'develop' || needs.detect_changes.outputs.pr_base_ref == 'master'))
      )
    runs-on: ubuntu-latest
    env:
      EFFECTIVE_BASE_BRANCH: ${{ needs.detect_changes.outputs.effective_base_branch }} # <-- needs 컨텍스트 사용
    environment: ${{ needs.detect_changes.outputs.effective_base_branch == 'master' && 'prod' || 'dev' }} # <-- needs 컨텍스트 사용 (L95)
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'issue_comment' && needs.detect_changes.outputs.pr_head_sha || github.ref }}
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven
      - name: Set Spring Profile Active and Config URI
        run: |
          # needs 컨텍스트를 사용하여 'prod' 또는 'dev' 설정
          PROFILE=${{ needs.detect_changes.outputs.effective_base_branch == 'master' && 'prod' || 'dev' }}
          echo "SPRING_PROFILES_ACTIVE=$PROFILE" >> $GITHUB_ENV
          echo "CONFIG_SERVER_URI=${{ secrets.CONFIG_SERVER_URI }}" >> $GITHUB_ENV
      - run: |
          MODULE_CSV=$(echo "${{ needs.detect_changes.outputs.changed }}" | sed 's/ /,/g')
          mvn -B clean package -pl "$MODULE_CSV" -am
      - uses: actions/upload-artifact@v4
        with:
          name: jars
          path: '**/target/*.jar'
          if-no-files-found: error

  deploy:
    needs: [ detect_changes, build ]
    if: > # if 조건은 그대로 유지
      needs.detect_changes.outputs.changed != '' &&
      (
        (github.event_name == 'push' && (github.ref_name == 'develop' || github.ref_name == 'master')) ||
        (github.event_name == 'pull_request' && (github.event.pull_request.base.ref == 'develop' || github.event.pull_request.base.ref == 'master') && github.event.action == 'closed' && github.event.pull_request.merged == true) ||
        (github.event_name == 'issue_comment' && github.event.issue.pull_request && contains(github.event.comment.body, 'REBUILD') && (needs.detect_changes.outputs.pr_base_ref == 'develop' || needs.detect_changes.outputs.pr_base_ref == 'master'))
      )
    runs-on: ubuntu-latest
    env:
      EFFECTIVE_BASE_BRANCH: ${{ needs.detect_changes.outputs.effective_base_branch }} # <-- needs 컨텍스트 사용
    environment: ${{ needs.detect_changes.outputs.effective_base_branch == 'master' && 'prod' || 'dev' }} # <-- needs 컨텍스트 사용 (L130)
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: jars
          path: downloaded_jars
      - name: Set Spring Profile Active and Config URI
        run: |
          # needs 컨텍스트를 사용하여 'prod' 또는 'dev' 설정
          PROFILE=${{ needs.detect_changes.outputs.effective_base_branch == 'master' && 'prod' || 'dev' }}
          echo "SPRING_PROFILES_ACTIVE=$PROFILE" >> $GITHUB_ENV
          echo "CONFIG_SERVER_URI=${{ secrets.CONFIG_SERVER_URI }}" >> $GITHUB_ENV
      - run: |
          echo ">>> Deploy modules: ${{ needs.detect_changes.outputs.changed }}"
          echo ">>> PROFILE=${{ env.SPRING_PROFILES_ACTIVE }}"
      - uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_IP }}
          username: ${{ secrets.SSH_ID }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          source: "downloaded_jars"
          target: "~/app/${{ env.SPRING_PROFILES_ACTIVE }}/jars/" # env.SPRING_PROFILES_ACTIVE 사용
          strip_components: 1
      - uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_IP }}
          username: ${{ secrets.SSH_ID }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e
            export SPRING_PROFILES_ACTIVE="${{ env.SPRING_PROFILES_ACTIVE }}" # env.SPRING_PROFILES_ACTIVE 사용
            export CONFIG_SERVER_URI="${{ env.CONFIG_SERVER_URI }}"
            EBB="${{ env.EFFECTIVE_BASE_BRANCH }}" # env.EFFECTIVE_BASE_BRANCH 사용
            
            if [ "$EBB" = "master" ]; then
              S=prod_startup.sh
            else
              S=dev_startup.sh
            fi
            chmod +x ~/$S
            CHANGED_SERVICES="${{ needs.detect_changes.outputs.changed }}"
            for M in $CHANGED_SERVICES; do
              echo ":arrow_forward: Rolling deploy: $M"
              bash ~/$S "$M"
            done