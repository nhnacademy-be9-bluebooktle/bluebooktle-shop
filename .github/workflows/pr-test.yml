name: PR Test - Maven

on:
  pull_request:
    branches: [ "develop", "master" ]
  issue_comment:
    types: [ created ]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  test:
    if: |
      github.event_name == 'pull_request' ||
      (
        github.event_name == 'issue_comment' &&
        github.event.issue.pull_request &&
        contains(github.event.comment.body, 'REBUILD')
      )
    runs-on: ubuntu-latest
    steps:
      - name: Get PR HEAD SHA for comment
        id: pr_sha
        if: github.event_name == 'issue_comment'
        run: |
          PR_API_URL="${{ github.event.issue.pull_request.url }}"
          PR_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github.v3+json" $PR_API_URL)
          echo "head_sha=$(echo "$PR_DATA" | jq -r .head.sha)" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'issue_comment' && steps.pr_sha.outputs.head_sha || github.ref }}
          fetch-depth: 0 # SonarQube PR Î∂ÑÏÑù Ïãú Ï†ÑÏ≤¥ ÌûàÏä§ÌÜ†Î¶¨ ÌïÑÏöî

      - name: Set up Redis
        uses: supercharge/redis-github-action@1.7.0
        with:
          redis-version: 'latest'

      - name: Set up JDK 21 and Maven Cache
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build, Test, Generate Coverage & Analyze with SonarQube
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            PR_API_URL="${{ github.event.issue.pull_request.url }}"
            PR_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" $PR_API_URL)
            PR_NUMBER=$(echo "$PR_DATA" | jq -r .number)
            PR_BASE_REF=$(echo "$PR_DATA" | jq -r .base.ref)
            PR_HEAD_REF=$(echo "$PR_DATA" | jq -r .head.ref)
            export SONAR_PULLREQUEST_KEY="$PR_NUMBER"
            export SONAR_PULLREQUEST_BASE="$PR_BASE_REF"
            export SONAR_PULLREQUEST_BRANCH="$PR_HEAD_REF"
            echo "SonarQube PR parameters set for PR #$PR_NUMBER"
          fi
          mvn -B clean verify sonar:sonar \
            -Dsonar.projectKey=bluebooktle \
            -Dsonar.projectName='bluebooktle' \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }} \

      - name: Publish Unit Test Results
        if: success()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: "**/target/surefire-reports/**/*.xml"

      - name: Publish JaCoCo Coverage Report
        uses: madrapps/jacoco-report@v1.6.1
        if: always()
        with:
          paths: ${{ github.workspace }}/coverage-report/target/site/jacoco-aggregate/jacoco.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 40
          min-coverage-changed-files: 60
          update-comment: true
          skip-if-no-changes: false
          title: 'üìä Code Coverage Report (Aggregated)'